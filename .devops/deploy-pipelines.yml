# Azure DevOps pipeline to release a new version and deploy to production.

# Only manual activations are intended
trigger: none
pr: none

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: patch
  - name: environment
    displayName: Target Environment
    type: string
    default: prod
    values:
      # - dev
      - prod

# variables set on azdevops to avoid circular dependency warning
# $(DEFAULT_BRANCH)
# $(MY_INDEX)
# $(BLOB_CONTAINER_NAME)
# $(PORT)
# $(BASE_URL)
# $(APIM_BASE_URL)
# $(PUBLIC_PATH)
# $(LOGO_PATH)
variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn
  AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
  # DevPortal
  STORAGE_ACCOUNT_NAME: $(PROD_STORAGE_ACCOUNT_NAME)
  PROFILE_CDN_NAME: $(PROD_PROFILE_CDN_NAME)
  ENDPOINT_NAME: $(PROD_ENDPOINT_NAME)
  RESOURCE_GROUP_NAME: $(PROD_RESOURCE_GROUP_NAME)
  BACKEND_URL: $(PROD_BACKEND_URL)
  # SelfCare IO  
  SELFCARE_STORAGE_ACCOUNT_NAME: $(PROD_STORAGE_ACCOUNT_NAME)
  SELFCARE_PROFILE_CDN_NAME: $(PROD_PROFILE_CDN_NAME)
  SELFCARE_ENDPOINT_NAME: $(PROD_ENDPOINT_NAME)
  SELFCARE_RESOURCE_GROUP_NAME: $(PROD_RESOURCE_GROUP_NAME)
  SELFCARE_BACKEND_URL: $(PROD_BACKEND_URL)

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v14
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch $(DEFAULT_BRANCH)
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition:
      or(
        eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH)),
        and(
          startsWith(variables['Build.SourceBranch'], 'refs/tags'),
          endsWith(variables['Build.SourceBranch'], '-RELEASE')
        )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        condition: eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH))
        steps:
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              persistCredentials: true
          - template: templates/node-github-release/template.yaml@pagopaCommons
            parameters:
              release_branch: '$(DEFAULT_BRANCH)'
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: '$(GIT_EMAIL)'
              gitUsername: '$(GIT_USERNAME)'
              gitHubConnection: '$(GITHUB_CONNECTION)'

      - job: skip_release
        condition: ne(variables['Build.SourceBranch'], format('refs/heads/{0}', variables.DEFAULT_BRANCH))
        steps:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'

  # Prepare Artifact with application bundle
  - stage: Prepare_artifact
    dependsOn:
      - Release
    pool:
      vmImage: 'ubuntu-latest'  
    jobs:
      - job: 'make_build'
        steps:
          # Build application
          - template: templates/node-job-setup/template.yaml@pagopaCommons
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/master --> master
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - template: azure-templates/make-build.yml

          - publish: $(System.DefaultWorkingDirectory)/dist
            artifact: Bundle
 
  # Deploy DevPortal
  - stage: 'Deploy_DevPortal'
    dependsOn:
      - Prepare_artifact
    pool:
      vmImage: 'windows-2019'
    jobs:
      - job: 'deploy_to_container'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureCLI@1
            displayName: 'Sync Storage'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                call az storage blob sync --container $(BLOB_CONTAINER_NAME) --account-name $(STORAGE_ACCOUNT_NAME) -s "$(Pipeline.Workspace)\Bundle"

          - task: AzureCLI@1
            displayName: 'Purge CDN'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                call az cdn endpoint purge -g $(RESOURCE_GROUP_NAME) -n $(ENDPOINT_NAME) --profile-name $(PROFILE_CDN_NAME) --content-paths "/*"

  - stage: 'Deploy_SelfCareIO'
    dependsOn:
      - Prepare_artifact
    jobs:
      - job: 'deploy_to_container'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureCLI@1
            displayName: 'Sync Storage'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                call az storage blob sync --container $(SELFCARE_BLOB_CONTAINER_NAME) --account-name $(SELFCARE_STORAGE_ACCOUNT_NAME) -s "$(Pipeline.Workspace)\Bundle"

          - task: AzureCLI@1
            displayName: 'Purge CDN'
            inputs:
              azureSubscription: '$(AZURE_SUBSCRIPTION)'
              scriptLocation: inlineScript
              inlineScript: |
                call az cdn endpoint purge -g $(SELFCARE_RESOURCE_GROUP_NAME) -n $(SELFCARE_ENDPOINT_NAME) --profile-name $(SELFCARE_PROFILE_CDN_NAME) --content-paths "/*"
